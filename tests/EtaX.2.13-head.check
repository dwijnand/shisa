// 2.13-head exitCode: 0
Welcome to Scala 2.13.2-bin-ff662eb (OpenJDK 64-Bit Server VM, Java 11.0.6).
Type in expressions for evaluation. Or try :help.

scala> trait Sam0S { def apply(): Any }
trait Sam0S

scala> @FunctionalInterface trait Sam0J { def apply(): Any }
trait Sam0J

scala> trait Sam1S { def apply(x: Any): Any }
trait Sam1S

scala> @FunctionalInterface trait Sam1J { def apply(x: Any): Any }
trait Sam1J

scala> trait A { def boom(): Unit }
trait A

scala> def foo()       = () => ""
def foo(): () => String

scala> def bar         = ""
def bar: String

scala> def baz()       = ""
def baz(): String

scala> def zap()()     = ""
def zap()(): String

scala> def zup(x: Any) = ""
def zup(x: Any): String

scala> val t1b: () => Any = foo                // warn/?: eta-expansion
val t1b: () => Any = $Lambda$870/0x0000000840640440@65192f16

scala> val t1c: () => Any = { val t = foo; t } // `()`-insertion because no expected type
val t1c: () => Any = $Lambda$872/0x0000000840641440@57f83dc7

scala> val t1d: () => Any = foo _              // ok, explicit eta-expansion requested
val t1d: () => Any = $Lambda$873/0x0000000840641840@5f72aaed

scala> val t1e: Any       = foo _              // ok, explicit eta-expansion requested
val t1e: Any = $Lambda$874/0x0000000840641c40@33d75081

scala> val t1f: Any       = foo() _            // error: _ must follow method
                               ^
       error: _ must follow method; cannot follow () => String

scala> val t20: Any       = { val t = bar   ; t } // ?/ok: apply
val t20: Any = ""

scala> val t2a: () => Any = bar                   // error/warn/succ: -Xlint:eta-zero, no eta-expansion w/o 2.14
                            ^
       error: type mismatch;
        found   : String
        required: () => Any

scala> val t2Sam0S: Sam0S = bar                   // err??/warn/succ: -Xlint:eta-zero + -Xlint:eta-sam, no eta-expansion w/o 2.14?
                            ^
       error: type mismatch;
        found   : String
        required: Sam0S

scala> val t2Sam0J: Sam0J = bar                   // err??/warn/succ: -Xlint:eta-zero, no eta-expansion w/o 2.14?
                            ^
       error: type mismatch;
        found   : String
        required: Sam0J

scala> val t2b: () => Any = bar()                 // error: bar doesn't take arguments, so expanded to bar.apply(), which misses an argument
                               ^
       error: not enough arguments for method apply: (i: Int): Char in class StringOps.
       Unspecified value parameter i.

scala> val t2c: () => Any = bar _                 // ok
val t2c: () => Any = $Lambda$930/0x0000000840679440@2ea82cef

scala> val t2d: () => Any = { val t = bar _ ; t } // ?/ok
val t2d: () => Any = $Lambda$931/0x000000084067a040@ae20523

scala> val t2e: Any       = bar _                 // ok
val t2e: Any = $Lambda$932/0x000000084067a440@664f1c53

scala> val t2f: Any       = bar() _               // error: not enough arguments for method apply
                               ^
       error: not enough arguments for method apply: (i: Int): Char in class StringOps.
       Unspecified value parameter i.

scala> val t3a: () => Any = baz                   // eta-expansion, but lint warning
val t3a: () => Any = $Lambda$933/0x000000084067a840@3ed3f72a

scala> val t3b: Any       = { val t = baz   ; t } // ?/succ/warn: apply, ()-insertion
val t3b: Any = ""

scala> val t3c: () => Any = { val t = baz _ ; t } // ok?/ok
val t3c: () => Any = $Lambda$934/0x000000084067ac40@7ebd31df

scala> val t3d: Any       = baz() _               // error: _ must follow method
                               ^
       error: _ must follow method; cannot follow String

scala> val t4a: () => Any = zap     // eta-expansion, but lint warning
val t4a: () => Any = $Lambda$937/0x000000084067c040@269c07d

scala> val t4b: () => Any = zap()   // ditto
val t4b: () => Any = $Lambda$938/0x000000084067c440@6dad9f5e

scala> val t4c: () => Any = zap _   // ok
val t4c: () => Any = $Lambda$939/0x000000084067c840@1db33525

scala> val t4d: () => Any = zap() _ // ok
val t4d: () => Any = $Lambda$940/0x000000084067cc40@5b4e3618

scala> val t5a: Any => Any = zup                   // ok
val t5a: Any => Any = $Lambda$941/0x000000084067f040@6b57ac6a

scala> val t5b: Sam1S      = zup                   // ok, but warning
val t5b: Sam1S = $anonfun$1@3a571436

scala> val t5c: Sam1J      = zup                   // ok
val t5c: Sam1J = $anonfun$1@3649dc49

scala> val t5d: Any => Any = { val t = zup   ; t } // error in 2.13, eta-expansion in 2.14
                                       ^
       error: missing argument list for method zup
       Unapplied methods are only converted to functions when a function type is expected.
       You can make this conversion explicit by writing `zup _` or `zup(_)` instead of `zup`.

scala> val t5e: Any => Any = { val t = zup _ ; t } // ?/ok
val t5e: Any => Any = $Lambda$947/0x000000084068a040@310e1ebb

scala> new A().boom // ?/?/err: apply, ()-insertion
       ^
       error: trait A is abstract; cannot be instantiated

scala> val ys = { val t = scala.collection.mutable.Map(1 -> "foo"); xs.clone } // ?/?/ok
                                                                    ^
       error: not found: value xs

scala> :quit
